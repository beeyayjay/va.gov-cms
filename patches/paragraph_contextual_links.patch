diff --git a/paragraphs.links.contextual.yml b/paragraphs.links.contextual.yml
new file mode 100644
index 0000000..a989763
--- /dev/null
+++ b/paragraphs.links.contextual.yml
@@ -0,0 +1,4 @@
+paragraphs.edit_paragraph:
+  title: 'Edit'
+  route_name: paragraphs.edit_paragraph
+  group: paragraph
diff --git a/paragraphs.routing.yml b/paragraphs.routing.yml
index ee8b03f..fb355d6 100644
--- a/paragraphs.routing.yml
+++ b/paragraphs.routing.yml
@@ -37,3 +37,11 @@ paragraphs.settings:
     _title: 'Paragraphs settings'
   requirements:
     _permission: 'administer paragraphs settings'
+
+paragraphs.edit_paragraph:
+  path: '/paragraph/{paragraph}/edit'
+  defaults:
+    _controller: '\Drupal\paragraphs\Controller\ContextualLinkController::goToEdit'
+  requirements:
+    _permission: 'access content'
+    node: \d+
diff --git a/src/Controller/ContextualLinkController.php b/src/Controller/ContextualLinkController.php
new file mode 100644
index 0000000..f00d3be
--- /dev/null
+++ b/src/Controller/ContextualLinkController.php
@@ -0,0 +1,58 @@
+<?php
+
+
+namespace Drupal\paragraphs\Controller;
+
+
+use Drupal\Core\Controller\ControllerBase;
+use Drupal\Core\Routing\IgnoreDestinationRedirectResponse;
+use Drupal\paragraphs\Entity\Paragraph;
+use Drupal\Core\Url;
+
+class ContextualLinkController extends ControllerBase {
+  public function goToEdit($paragraph) {
+    $parents = [];
+    $paragraph_object = $this->entityTypeManager()->getStorage('paragraph')->load($paragraph);
+
+    $node_id = self::get_parents($paragraph_object, $parents);
+    if ($node_id) {
+      $options['query'] = [];
+      $options['query']['edit_para'][] = $paragraph;
+      $options['fragment'] = 'p' . $paragraph;
+      foreach ($parents as $parent) {
+        $options['query']['edit_para'][] = $parent;
+      }
+
+      return new IgnoreDestinationRedirectResponse(Url::fromRoute('entity.node.edit_form', ['node' => $node_id], $options)->setAbsolute()->toString());
+    }
+    else {
+      throw new \Exception($this->t('Could not find edit screen for paragraph %id', ['%id' => $paragraph]));
+    }
+  }
+
+  /**
+   * Adds all of the paragraph's ancestor ids to parent_ids.
+   *
+   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   *   The paragraph to find the parent's of.
+   * @param array $parent_ids
+   *   An array to hold parent ids.
+   *
+   * @return int
+   *   The paragraph's node id.
+   */
+  public static function get_parents(Paragraph $paragraph, array &$parent_ids=[]) {
+    $node_id = 0;
+
+    $parent = $paragraph->getParentEntity();
+    if ($parent->getEntityType()->id() === 'paragraph') {
+      $parent_ids[] = $parent->id();
+      $node_id = self::get_parents($parent, $parent_ids);
+    }
+    elseif ($parent->getEntityType()->id() === 'node') {
+      $node_id = $parent->id();
+    }
+    return $node_id;
+  }
+
+}
diff --git a/src/ParagraphViewBuilder.php b/src/ParagraphViewBuilder.php
index 87b45eb..1a02dc9 100644
--- a/src/ParagraphViewBuilder.php
+++ b/src/ParagraphViewBuilder.php
@@ -5,6 +5,8 @@ namespace Drupal\paragraphs;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\EntityViewBuilder;
 use Drupal\Core\Render\Element;
+use Drupal\paragraphs\Controller\ContextualLinkController;
+use Drupal\paragraphs\Entity\Paragraph;
 
 /**
  * Render controller for paragraphs.
@@ -38,6 +40,14 @@ class ParagraphViewBuilder extends EntityViewBuilder {
         $plugin_value->view($build_list[$key], $build['#paragraph'], $display, $build['#view_mode']);
       }
       $build_list[$key]['#attached']['library'][] = 'paragraphs/drupal.paragraphs.unpublished';
+
+      if (ContextualLinkController::get_parents($build_list[$key]['#paragraph'])) {
+        $build_list[$key]['#contextual_links']['paragraph'] = [
+          'route_parameters' => [
+            'paragraph' => $build_list[$key]['#paragraph']->id(),
+          ]
+        ];
+      }
     }
 
     return $build_list;
diff --git a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
index 7c2a707..354d848 100644
--- a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
+++ b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
@@ -379,8 +379,12 @@ class ParagraphsWidget extends WidgetBase {
     elseif (isset($items[$delta]->entity)) {
       $paragraphs_entity = $items[$delta]->entity;
 
+      // If there's an 'edit_para' parameters, open listed paragraphs.
+      if (isset($_GET['edit_para']) && in_array($paragraphs_entity->id(),  $_GET['edit_para'])) {
+        $item_mode = 'edit';
+      }
       // We don't have a widget state yet, get from selector settings.
-      if (!isset($widget_state['paragraphs'][$delta]['mode'])) {
+      elseif (!isset($widget_state['paragraphs'][$delta]['mode'])) {
 
         if ($default_edit_mode == 'open' || $widget_state['items_count'] < $this->getSetting('closed_mode_threshold')) {
           $item_mode = 'edit';
@@ -518,7 +522,8 @@ class ParagraphsWidget extends WidgetBase {
         ),
       );
 
-      $element['#prefix'] = '<div id="' . $wrapper_id . '">';
+      // Create an anchor based on the paragraph id.
+      $element['#prefix'] = '<span id="p' . $paragraphs_entity->id() . '"></span><div id="' . $wrapper_id . '">';
       $element['#suffix'] = '</div>';
 
       // Create top section structure with all needed subsections.
