diff --git a/paragraphs.links.contextual.yml b/paragraphs.links.contextual.yml
new file mode 100644
index 0000000..a989763
--- /dev/null
+++ b/paragraphs.links.contextual.yml
@@ -0,0 +1,4 @@
+paragraphs.edit_paragraph:
+  title: 'Edit'
+  route_name: paragraphs.edit_paragraph
+  group: paragraph
diff --git a/paragraphs.routing.yml b/paragraphs.routing.yml
index ee8b03f..f8d5166 100644
--- a/paragraphs.routing.yml
+++ b/paragraphs.routing.yml
@@ -37,3 +37,11 @@ paragraphs.settings:
     _title: 'Paragraphs settings'
   requirements:
     _permission: 'administer paragraphs settings'
+
+paragraphs.edit_paragraph:
+  path: '/paragraph/{paragraph}/edit'
+  defaults:
+    _controller: '\Drupal\paragraphs\Controller\ParagraphsContextualLinkController::goToEdit'
+  requirements:
+    _permission: 'access content'
+    node: \d+
diff --git a/src/Controller/ParagraphsContextualLinkController.php b/src/Controller/ParagraphsContextualLinkController.php
new file mode 100644
index 0000000..900ad43
--- /dev/null
+++ b/src/Controller/ParagraphsContextualLinkController.php
@@ -0,0 +1,62 @@
+<?php
+
+namespace Drupal\paragraphs\Controller;
+
+use Drupal\Core\Controller\ControllerBase;
+use Drupal\Core\Routing\IgnoreDestinationRedirectResponse;
+use Drupal\paragraphs\Entity\Paragraph;
+use Drupal\Core\Url;
+use Exception;
+
+/**
+ * Provides a contextual link for editing paragraphs.
+ */
+class ParagraphsContextualLinkController extends ControllerBase {
+  public function goToEdit($paragraph) {
+    $parents = [];
+    /** @var Paragraph $paragraph_object */
+    $paragraph_object = $this->entityTypeManager()->getStorage('paragraph')->load($paragraph);
+
+    $ancestor = self::get_parents($paragraph_object, $parents);
+    if (!empty($ancestor)) {
+      $options['query'] = [];
+      $options['query']['edit_para'][] = $paragraph;
+      $options['fragment'] = 'p' . $paragraph;
+      foreach ($parents as $parent) {
+        $options['query']['edit_para'][] = $parent;
+      }
+
+      $entity_type = $ancestor->getEntityType()->id();
+      return new IgnoreDestinationRedirectResponse(Url::fromRoute("entity.$entity_type.edit_form", [$entity_type => $ancestor->id()], $options)->setAbsolute()->toString());
+    }
+    else {
+      throw new Exception($this->t('Could not find edit screen for paragraph %id', ['%id' => $paragraph]));
+    }
+  }
+
+  /**
+   * Adds ids of any containing paragraphs to parent_ids and returns [type => id] of the entity that contains them.
+   *
+   * @param \Drupal\paragraphs\Entity\Paragraph $paragraph
+   *   The paragraph to find the parents of.
+   * @param array $paragraph_ids
+   *   An array to hold ids of paragraphs that contain this paragraph.
+   *
+   * @return \Drupal\node\Entity\Node|null
+   *   The node where the paragraph lives.
+   */
+  public static function get_parents(Paragraph $paragraph, array &$paragraph_ids=[]) {
+    $parent_node = NULL;
+    /** @var Paragraph $parent */
+    $parent = $paragraph->getParentEntity();
+    if ($parent->getEntityType()->id() === 'paragraph') {
+      $paragraph_ids[] = $parent->id();
+      $parent_node = self::get_parents($parent, $paragraph_ids);
+    }
+    elseif ($parent->getEntityType()->id() === 'node') {
+      $parent_node = $parent;
+    }
+    return $parent_node;
+  }
+
+}
diff --git a/src/ParagraphViewBuilder.php b/src/ParagraphViewBuilder.php
index bca9b71..a6a62e9 100644
--- a/src/ParagraphViewBuilder.php
+++ b/src/ParagraphViewBuilder.php
@@ -5,6 +5,8 @@ namespace Drupal\paragraphs;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\EntityViewBuilder;
 use Drupal\Core\Render\Element;
+use Drupal\paragraphs\Controller\ParagraphsContextualLinkController;
+use Drupal\paragraphs\Entity\Paragraph;
 
 /**
  * Render controller for paragraphs.
@@ -27,10 +29,10 @@ class ParagraphViewBuilder extends EntityViewBuilder {
       // might not be available yet.
       if (!$display) {
         $display = EntityViewDisplay::create([
-          'targetEntityType' => 'paragraph',
-          'bundle' => $build['#paragraph']->bundle(),
-          'mode' => 'default',
-          'status' => TRUE,
+            'targetEntityType' => 'paragraph',
+            'bundle' => $build['#paragraph']->bundle(),
+            'mode' => 'default',
+            'status' => TRUE,
         ]);
       }
 
@@ -38,9 +40,38 @@ class ParagraphViewBuilder extends EntityViewBuilder {
         $plugin_value->view($build_list[$key], $build['#paragraph'], $display, $build['#view_mode']);
       }
       $build_list[$key]['#attached']['library'][] = 'paragraphs/drupal.paragraphs.unpublished';
-    }
 
+      /** @var Paragraph $paragraph */
+      $paragraph = $build_list[$key]['#paragraph'];
+
+      // If the latest version isn't the current version, don't display edit links on current version.
+      $latest = TRUE;
+      $ancestor = ParagraphsContextualLinkController::get_parents($paragraph);
+      if ($ancestor) {
+        $vids = \Drupal::entityTypeManager()
+            ->getStorage('node')
+            ->revisionIds($ancestor);
+        if ($ancestor->getRevisionId() !== end($vids)) {
+          if (($parent = $paragraph->getParentEntity()) && $parent->hasField($paragraph->get('parent_field_name')->value)) {
+            $parent_field = $paragraph->get('parent_field_name')->value;
+            $field = $parent->get($parent_field);
+            foreach ($field as $value) {
+              if ($value->entity && $value->entity->getRevisionId() == $paragraph->getRevisionId()) {
+                $latest = FALSE;
+                break;
+              }
+            }
+          }
+        }
+        if ($latest) {
+          $build_list[$key]['#contextual_links']['paragraph'] = [
+              'route_parameters' => [
+                  'paragraph' => $paragraph->id(),
+              ]
+          ];
+        }
+      }
+    }
     return $build_list;
   }
-
 }
diff --git a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
index e6decde..740aa6a 100644
--- a/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
+++ b/src/Plugin/Field/FieldWidget/ParagraphsWidget.php
@@ -380,8 +380,12 @@ class ParagraphsWidget extends WidgetBase {
     elseif (isset($items[$delta]->entity)) {
       $paragraphs_entity = $items[$delta]->entity;
 
+      // If there's an 'edit_para' parameters, open listed paragraphs.
+      if (isset($_GET['edit_para']) && in_array($paragraphs_entity->id(),  $_GET['edit_para'])) {
+        $item_mode = 'edit';
+      }
       // We don't have a widget state yet, get from selector settings.
-      if (!isset($widget_state['paragraphs'][$delta]['mode'])) {
+      elseif (!isset($widget_state['paragraphs'][$delta]['mode'])) {
 
         if ($default_edit_mode == 'open' || $widget_state['items_count'] < $this->getSetting('closed_mode_threshold')) {
           $item_mode = 'edit';
@@ -519,7 +523,8 @@ class ParagraphsWidget extends WidgetBase {
         ),
       );
 
-      $element['#prefix'] = '<div id="' . $wrapper_id . '">';
+      // Create an anchor based on the paragraph id.
+      $element['#prefix'] = '<span id="p' . $paragraphs_entity->id() . '"></span><div id="' . $wrapper_id . '">';
       $element['#suffix'] = '</div>';
 
       // Create top section structure with all needed subsections.
